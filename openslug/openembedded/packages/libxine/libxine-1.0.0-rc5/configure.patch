Xine is stupid in that they don't have --with or --without comments for
all of their items.  That should be fixed, but until then, this configure
script should avoid some of the pain and or suffering

--- xine-lib-1-rc5/configure.ac	2004-06-20 16:39:04.000000000 -0700
+++ xine-lib-1-rc5.new/configure.ac	2004-06-29 15:06:26.057570960 -0700
@@ -887,46 +887,28 @@
 dnl Ogg/Theora libs.
 dnl ---------------------------------------------
 
-AM_PATH_OGG(
-           [ AM_PATH_THEORA(AC_DEFINE(HAVE_THEORA,1,[Define this if you have theora]),
-                           AC_MSG_RESULT([*** All OGG/THEORA dependent parts will be disabled ***]))
-          ],
-           AC_MSG_RESULT([*** All of OGG/Theora dependent parts will be disabled ***]))
-AM_CONDITIONAL(HAVE_THEORA, [test x"$no_ogg" != "xyes" -a x"$no_theora" != "xyes"])
+AM_CONDITIONAL(HAVE_THEORA, 0)
 
 
 dnl ---------------------------------------------
 dnl Ogg/Speex libs.
 dnl ---------------------------------------------
 
-AM_PATH_OGG(
-           [ AM_PATH_SPEEX(AC_DEFINE(HAVE_SPEEX,1,[Define this if you have speex]),
-                           AC_MSG_RESULT([*** All OGG/SPEEX dependent parts will be disabled ***]))
-          ],
-           AC_MSG_RESULT([*** All of OGG/Speex dependent parts will be disabled ***]))
-AM_CONDITIONAL(HAVE_SPEEX, [test x"$no_ogg" != "xyes" -a x"$no_speex" != "xyes"])
-
+AM_CONDITIONAL(HAVE_SPEEX, 0)
 
 dnl ---------------------------------------------
 dnl check for libFLAC
 dnl ---------------------------------------------
 
-AM_PATH_LIBFLAC([],
-	AC_MSG_RESULT([*** All FLAC dependent parts will be disabled ***]))
-AM_CONDITIONAL(HAVE_FLAC, [test x"$no_libFLAC" != "xyes"])
+AM_CONDITIONAL(HAVE_FLAC, 0)
 
 
 dnl ---------------------------------------------
 dnl MNG libs.
 dnl ---------------------------------------------
 
-AC_CHECK_LIB(mng, mng_initialize,
-	[ AC_CHECK_HEADER(libmng.h,
-		[ have_libmng=yes
-		  MNG_LIBS="-lmng" ], 
-		AC_MSG_RESULT([*** All libmng dependent parts will be disabled ***]))],
-	AC_MSG_RESULT([*** All libmng dependent parts will be disabled ***]))
-AM_CONDITIONAL(HAVE_LIBMNG, test x"$have_libmng" = "xyes")
+MNG_LIBS=""
+AM_CONDITIONAL(HAVE_LIBMNG, 0)
 AC_SUBST(MNG_LIBS)
 
 
@@ -1204,35 +1186,7 @@
     ],ISOC99_PRAGMA=no)
     AC_MSG_RESULT($ISOC99_PRAGMA)
 
-    dnl bitfield order
-    AC_MSG_CHECKING(bitfield ordering in structs)
-    AC_TRY_RUN([
-int
- main() {
-  struct { char bit_0:1, bit_12:2, bit_345:3, bit_67:2; }
-#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
-  __attribute__((packed))
-#endif
-  bf = { 1,1,1,1 };
-  if (sizeof (bf) != 1) return 1;
-  return *((unsigned char*) &bf) != 0x4b; }
-], bf_lsbf=1, AC_TRY_RUN([ 
-int
-main() {
-  struct { char bit_0:1, bit_12:2, bit_345:3, bit_67:2; }
-#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
-  __attribute__((packed))
-#endif
-  bf = { 1,1,1,1 };
-  if (sizeof (bf) != 1) return 1;
-  return *((unsigned char*) &bf) != 0xa5; }
-], bf_lsbf=0, AC_MSG_ERROR([unsupported bitfield ordering])))
-    if test "x$bf_lsbf" = "x1"; then
-     AC_MSG_RESULT(LSBF)
-     AC_DEFINE(BITFIELD_LSBF, [], [compiler does lsbf in struct bitfields])
-    else
-     AC_MSG_RESULT(MSBF)
-    fi
+    AC_DEFINE(BITFIELD_LSBF, [], [compiler does lsbf in struct bitfields])
 
     AC_HAVE_HEADERS( errno.h fcntl.h \
 		     stdbool.h  stdlib.h stdint.h stdio.h string.h \
